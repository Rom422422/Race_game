import csv

def mapsender(map_name):
    
    map_loading = []
    textfile = 'txt_files/Map '+map_name+'.csv'
    with open(textfile, newline='') as csvfile:
        spamreader = csv.reader(csvfile, delimiter=';', quotechar='|')
        for row in spamreader:
            map_loading.append(row)
    length, width = len(map_loading[0]), (len(map_loading))
    return map_loading, width, length



map_test = [
    "B",   "B",   "B",   "B",   "B",   "B",   "B",    "B",   "B",   "B",   "B",   "B",   "B",   "B",  "B",   "B",   "B",   "B",   "B",   "B",   "B",   "B",   "B",   "B",   "B",   "B",   "B",   "B",
    "B",   "V",   "V",   "V",   "V",   "V",   "V",    "B",   "B",   "B",   "V",   "V",   "V",   "V",  "V",   "V",   "V",   "V",   "B",   "B",   "B",   "V",   "V",   "V",   "V",   "V",   "V",   "B",
    "B",   "V",   "V",   "V",   "V",   "B",   "B",    "V",   "V",   "V",   "V",   "V",   "V",   "V",  "V",   "V",   "V",   "V",   "V",   "V",   "V",   "B",   "B",   "V",   "V",   "V",   "V",   "B",
    "B",   "V",   "V",   "V",   "B",   "V",   "V",    "V",   "V",   "V",   "V",   "V",   "V",   "V",  "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "B",   "V",   "V",   "V",   "B",
    "B",   "V",   "V",   "B",   "V",   "V",   "V",    "V",   "V",   "V",   "V",   "V",   "V",   "V",  "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "B",   "V",   "V",   "B",
    "B",   "V",   "B",   "V",   "V",   "V",   "V",    "V",   "V",   "V",   "V",   "V",   "V",   "V",  "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "B",   "V",   "B",
    "B",   "V",   "B",   "V",   "V",   "V",   "V",    "V",   "V",   "V",   "V",   "V",   "V",   "V",  "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "B",   "V",   "B",
    "B",   "B",   "V",   "V",   "V",   "V",   "V",    "V",   "V",   "V",   "V",   "V",   "V",   "V",  "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "B",   "B",
    "B",   "B",   "V",   "V",   "V",   "V",   "V",    "V",   "V",   "V",   "V",   "V",   "V",   "V",  "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "B",   "B",
    "V",   "B",   "V",   "V",   "V",   "V",   "V",    "V",   "V",   "V",   "V",   "V",   "V",   "V",  "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "B",   "B",
    "B",   "V",   "V",   "V",   "V",   "V",   "V",    "B",   "B",   "B",   "B",   "V",   "V",   "V",  "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "B",
    "B",   "V",   "V",   "V",   "V",   "V",   "B",    "V",   "V",   "V",   "V",   "B",   "V",   "V",  "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "B",
    "B",   "V",   "V",   "V",   "V",   "B",   "V",    "V",   "V",   "V",   "V",   "V",   "B",   "V",  "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "B",
    "B",   "V",   "V",   "V",   "V",   "B",   "V",    "V",   "V",   "V",   "V",   "V",   "B",   "V",  "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "B",
    "B",   "V",   "V",   "V",   "V",   "B",   "V",    "V",   "V",   "V",   "V",   "V",   "B",   "V",  "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "B",
    "B",   "V",   "V",   "V",   "V",   "B",   "V",    "V",   "V",   "V",   "V",   "V",   "B",   "V",  "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "B",
    "B",   "V",   "V",   "V",   "V",   "B",   "V",    "V",   "V",   "V",   "V",   "V",   "B",   "V",  "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "B",
    "B",   "V",   "V",   "V",   "V",   "V",   "B",    "V",   "V",   "V",   "V",   "B",   "V",   "V",  "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "B",
    "V",   "B",   "V",   "V",   "V",   "V",   "V",    "B",   "B",   "B",   "B",   "V",   "V",   "V",  "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "B",   "B",
    "B",   "B",   "V",   "V",   "V",   "V",   "V",    "V",  "V",   "V",   "V",    "V",   "V",   "V",  "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "B",   "B",
    "B",   "B",   "V",   "V",   "V",   "V",   "V",    "V",   "V",   "V",   "V",   "V",   "V",   "V",  "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "B",   "B",
    "B",   "V",   "B",   "V",   "V",   "V",   "V",    "V",   "V",   "V",   "V",   "V",   "V",   "V",  "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "B",   "V",   "B",
    "B",   "V",   "B",   "V",   "V",   "V",   "V",    "V",   "V",   "V",   "V",   "V",   "V",   "V",  "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "B",   "V",   "B",
    "B",   "V",   "V",   "B",   "V",   "V",   "V",    "V",   "V",   "V",   "V",   "V",   "V",   "V",  "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "B",   "V",   "V",   "B",
    "B",   "V",   "V",   "V",   "B",   "V",   "V",    "V",   "V",   "V",   "V",   "V",   "V",   "V",  "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "V",   "B",   "V",   "V",   "V",   "B",
    "B",   "V",   "V",   "V",   "V",   "B",   "B",    "V",   "V",   "V",   "V",   "V",   "V",   "V",  "V",   "V",   "V",   "V",   "V",   "V",   "V",   "B",   "B",   "V",   "V",   "V",   "V",   "B",
    "B",   "V",   "V",   "V",   "V",   "V",   "V",    "B",   "B",   "B",   "V",   "V",   "V",   "V",  "V",   "V",   "V",   "V",   "B",   "B",   "B",   "V",   "V",   "V",   "V",   "V",   "V",   "B",
    "B",   "B",   "B",   "B",   "B",   "B",   "B",    "B",   "B",   "B",   "B",   "B",   "B",   "B",  "B",   "B",   "B",   "B",   "B",   "B",   "B",   "B",   "B",   "B",   "B",   "B",   "B",   1
]

